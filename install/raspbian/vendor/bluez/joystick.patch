diff --git attrib/gatttool.c attrib/gatttool.c
index b8e0f68..6d7698e 100644
--- attrib/gatttool.c
+++ attrib/gatttool.c
@@ -54,6 +54,7 @@ static int opt_end = 0xffff;
 static int opt_handle = -1;
 static int opt_mtu = 0;
 static int opt_psm = 0;
+static int opt_joystick=0;
 static gboolean opt_primary = FALSE;
 static gboolean opt_characteristics = FALSE;
 static gboolean opt_char_read = FALSE;
@@ -518,7 +519,9 @@ static GOptionEntry options[] = {
 		"Specify the PSM for GATT/ATT over BR/EDR", "PSM" },
 	{ "sec-level", 'l', 0, G_OPTION_ARG_STRING, &opt_sec_level,
 		"Set security level. Default: low", "[low | medium | high]"},
-	{ NULL },
+    { "joystick", 'j', 0, G_OPTION_ARG_INT, &opt_joystick,
+        "Specify the SDL Joystick number", "joystick" },
+    { NULL },
 };
 
 int main(int argc, char *argv[])
@@ -563,7 +566,7 @@ int main(int argc, char *argv[])
 	}
 
 	if (opt_interactive) {
-		interactive(opt_src, opt_dst, opt_dst_type, opt_psm);
+		interactive(opt_src, opt_dst, opt_dst_type, opt_psm, opt_joystick);
 		goto done;
 	}
 
diff --git attrib/gatttool.h attrib/gatttool.h
index 8f0913c..9200858 100644
--- attrib/gatttool.h
+++ attrib/gatttool.h
@@ -22,7 +22,7 @@
  */
 
 int interactive(const char *src, const char *dst, const char *dst_type,
-								int psm);
+								int psm, int joystick);
 GIOChannel *gatt_connect(const char *src, const char *dst,
 			const char *dst_type, const char *sec_level,
 			int psm, int mtu, BtIOConnect connect_cb,
diff --git attrib/interactive.c attrib/interactive.c
index 7911ba5..9298e75 100644
--- attrib/interactive.c
+++ attrib/interactive.c
@@ -25,6 +25,8 @@
 #include "config.h"
 #endif
 
+#include "SDL.h"
+
 #include <string.h>
 #include <stdlib.h>
 #include <stdarg.h>
@@ -62,6 +64,7 @@ static int start;
 static int end;
 
 static void cmd_help(int argcp, char **argvp);
+static void reconnect();
 
 static enum state {
 	STATE_DISCONNECTED,
@@ -634,6 +637,7 @@ static void char_write_req_cb(guint8 status, const guint8 *pdu, guint16 plen,
 	rl_printf("Characteristic value was written successfully\n");
 }
 
+
 static void cmd_char_write(int argcp, char **argvp)
 {
 	uint8_t *value;
@@ -642,6 +646,7 @@ static void cmd_char_write(int argcp, char **argvp)
 
 	if (conn_state != STATE_CONNECTED) {
 		failed("Disconnected\n");
+        reconnect();
 		return;
 	}
 
@@ -803,8 +808,8 @@ static struct {
 		"Characteristic Value Write (No response)" },
 	{ "sec-level",		cmd_sec_level,	"[low | medium | high]",
 		"Set security level. Default: low" },
-	{ "mtu",		cmd_mtu,	"<value>",
-		"Exchange MTU for GATT/ATT" },
+    { "mtu",		cmd_mtu,	"<value>",
+        "Exchange MTU for GATT/ATT" },
 	{ NULL, NULL, NULL}
 };
 
@@ -987,8 +992,108 @@ static guint setup_signalfd(void)
 	return source;
 }
 
+static void reconnect() {
+    cmd_connect(0,NULL);
+    printf("Waiting to connect...");
+    while (conn_state != STATE_CONNECTED)
+    {
+        g_main_context_iteration(NULL, 0);
+        //printf(".");
+        usleep(10000);
+    }
+    
+    //char * cmdParams[3] = {"char-write-req", "0x000f", "0100"};
+    //cmd_char_write(3, cmdParams);
+
+}
+
+
+int startJoypad(GMainLoop *eventLoop, int joystick) {
+    if ( SDL_InitSubSystem ( SDL_INIT_JOYSTICK ) < 0 )
+    {
+        error ("Unable to initialize Joystick: %s\n", SDL_GetError() );
+        //return -1;
+    }
+    
+    printf ( "%i joysticks found\n", SDL_NumJoysticks () );
+    
+    if (SDL_NumJoysticks () < joystick) {
+        error("Selected joystick %d > %d joysticks", joystick, SDL_NumJoysticks ());
+        //return -1;
+    }
+    
+    SDL_Joystick* joy1 = SDL_JoystickOpen ( joystick);
+    
+    if ( joy1 == NULL ) {
+        error( "could not open joystick\n" );
+        //cmd_exit(0, NULL);
+    }
+    
+    printf ( "%i Axis\n", SDL_JoystickNumAxes ( joy1 ) );
+    printf ( "%i Balls\n", SDL_JoystickNumBalls ( joy1 ) );
+    printf ( "%i Hats\n", SDL_JoystickNumHats ( joy1 ) );
+    printf ( "%i Buttons\n", SDL_JoystickNumButtons ( joy1 ) );
+    //SDL_JoystickEventState(SDL_ENABLE);
+    SDL_JoystickEventState ( SDL_QUERY );
+    int i;
+    //for (i = 0; i< 18; i++)
+    //    SDL_JoystickUpdate ();
+
+    uint8_t xAxis  = 0x7f;
+    uint8_t yAxis  = 0x7f;
+    uint8_t zAxis  = 0xff;
+    
+    // BLE sending
+    
+    
+
+    
+    char buf[8+1];
+
+    uint32_t nextSend = SDL_GetTicks() + 100;
+    
+    while (1)
+    {
+        g_main_context_iteration(NULL, 0);
+        SDL_JoystickUpdate ();
+        
+        if (conn_state == STATE_DISCONNECTED)
+            reconnect();
+
+        int x = SDL_JoystickGetAxis ( joy1, 0 );
+        int y = SDL_JoystickGetAxis ( joy1, 1 );
+        int z = SDL_JoystickGetAxis ( joy1, 4 );
+
+        xAxis = ((x+(1<<15))>>8);
+        yAxis = ((y+(1<<15))>>8);
+        zAxis = (( (-z-1)+(1<<15))>>8);
+
+        //printf ( "Joypadupdate(%d,%d,%d) = (%d,%d,%d)\n", x,y,z, xAxis, yAxis, zAxis);
+
+        if ( SDL_GetTicks () > nextSend) {
+            nextSend = SDL_GetTicks() + 100;
+            
+            snprintf(buf, sizeof(buf), "%02x%02x%02x%02x", xAxis, 255-yAxis, 0, zAxis);
+            char * cmdParams[3] = {"char-write-cmd", "0x0014", buf};
+            cmd_char_write(sizeof(cmdParams),cmdParams);
+            //printf ( "Joypadupdate(%d,%d,%d) = %s\n", xAxis, yAxis, zAxis, buf);
+
+            /* TODO: check why this isn't working instead of the above long winded approach
+            value[0]=xAxis;
+            value[1]=255-yAxis;
+            value[2]=0;
+            value[3]=zAxis;
+            gatt_write_char(attrib, 0x0011, value, 4, NULL, NULL);
+            */
+        }
+    }
+    SDL_Quit();
+    return 0;
+}
+
+
 int interactive(const char *src, const char *dst,
-		const char *dst_type, int psm)
+		const char *dst_type, int psm, int joystick)
 {
 	guint input;
 	guint signal;
@@ -1010,8 +1115,15 @@ int interactive(const char *src, const char *dst,
 	rl_attempted_completion_function = commands_completion;
 	rl_erase_empty_line = 1;
 	rl_callback_handler_install(get_prompt(), parse_line);
-
-	g_main_loop_run(event_loop);
+    
+    // need to trigger 1st glib poll before using callback below.
+    g_main_context_iteration(NULL, 0);
+    reconnect(); // auto-connect 1st time
+    
+ 	if (joystick>0)
+    		startJoypad(event_loop, joystick-1);
+	else
+		g_main_loop_run(event_loop);
 
 	rl_callback_handler_remove();
 	cmd_disconnect(0, NULL);
